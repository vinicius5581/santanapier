{"version":3,"sources":["components/About.js","components/Contact.js","components/Social.js","components/App.js","serviceWorker.js","index.js"],"names":["options","value","label","About","react_default","a","createElement","react_select_esm","className","classNamePrefix","defaultValue","isDisabled","isLoading","isClearable","isRtl","isSearchable","name","backspaceRemovesValue","onChange","console","log","Contact","href","App","BrowserRouter","target","Route","path","component","Social","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAIMA,SAAU,CACZ,CAAEC,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,UAAWC,MAAO,aAuBhBC,EApBD,kBACVC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,cACVC,gBAAgB,cAChBC,aAAcV,EAAQ,GACtBW,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,OAAO,EACPC,cAAc,EACdC,KAAK,SACLhB,QAASA,EACTiB,uBAAuB,EACvBC,SAAU,SAACjB,GAAD,OAASkB,QAAQC,IAAInB,QCrB1BoB,EAFC,kBAAMjB,EAAAC,EAAAC,cAAA,sBCUPe,EAVC,kBACZjB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,8BAAR,YACAlB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,oCAAR,WACAlB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,2CAAR,gBCsBGC,0LApBX,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGmB,OAAO,SAASH,KAAK,kGAAxB,iBACHlB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWzB,IACjCC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWP,IACnCjB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWC,KAEpCzB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,+DACAF,EAAAC,EAAAC,cAAA,qCAdMwB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b57f3c5.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport './About.css';\n\nconst options = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' }\n]\n\nconst About = () => (\n    <div>\n        <h1>About</h1>\n        <Select\n          className=\"selectAbout\"\n          classNamePrefix=\"selectAbout\"\n          defaultValue={options[0]}\n          isDisabled={false}\n          isLoading={false}\n          isClearable={false}\n          isRtl={false}\n          isSearchable={true}\n          name=\"flavor\"\n          options={options}\n          backspaceRemovesValue={true}\n          onChange={(value)=>console.log(value)}\n        />\n    </div>\n)\n\nexport default About;","import React from 'react';\n\nconst Contact = () => <h1>Contact</h1>\n\nexport default Contact;","import React from 'react';\n\nconst Contact = () => (\n    <ul>\n        <li>\n            <a href=\"http://fb.me/SantanaPierSF\">Facebook</a>\n            <a href=\"https://twitter.com/Santana_Pier\">Twitter</a>\n            <a href=\"https://www.instagram.com/santana_pier/\">Instagram</a>\n        </li>\n    </ul>\n)\n\nexport default Contact;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport About from './About';\nimport Contact from './Contact';\nimport Social from './Social';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Santana Pier</h1>\n            <p><a target=\"_blank\" href=\"https://www.amazon.com/s?marketplaceID=ATVPDKIKX0DER&me=A1HGM960YO2A4C&merchant=A1HGM960YO2A4C\">Amazon Store</a></p>\n            <Route path=\"/about/\" component={About} />\n            <Route path=\"/contact/\" component={Contact} />\n            <Route path=\"/social/\" component={Social} />\n          </header>       \n          <footer className=\"App-footer\">\n            <p>501 Delancey St. #110 - San Francisco - CA - 94107</p>\n            <p>(415) 312-5802</p>\n          </footer>   \n        </div>        \n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}